AWSTemplateFormatVersion: '2010-09-09'
Description: Provisioning an Oracle RDS instance with credentials managed by AWS Secrets Manager, rotated by a Lambda function every week.

Parameters:
  VpcCidrBlock:
    Type: String
    Description: CIDR block for the VPC
    Default: '10.0.0.0/16'

  PublicSubnetCidrBlock1:
    Type: String
    Description: CIDR block for the first public subnet
    Default: '10.0.1.0/24'

  PublicSubnetCidrBlock2:
    Type: String
    Description: CIDR block for the second public subnet
    Default: '10.0.2.0/24'

  DBInstanceIdentifier:
    Type: String
    Description: Identifier for the RDS instance

  DBInstanceClass:
    Type: String
    Description: RDS instance class
    Default: db.t3.small

  DBName:
    Type: String
    Description: Name of the initial database
    Default: 'DBRDS'

  MasterUsername:
    Type: String
    Description: Master username for the RDS instance

  # Sensitive parameter for master password
  MasterUserPassword:
    Type: String
    Description: Master user password for the RDS instance
    NoEcho: true
    Default: MyPassword123!

Resources:
  # VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  # Attach Internet Gateway to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnetCidrBlock1
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnetCidrBlock2
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true

  # Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  # Route to Internet Gateway
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  # Associate Subnets with Route Table
  AssociateRouteTable1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  AssociateRouteTable2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Security Group for RDS
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS instance
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 1521   # Oracle database port
          ToPort: 1521     # Oracle database port
          CidrIp: 0.0.0.0/0

  # RDS DB Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS instance
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  # RDS DB Instance
  MyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      DBName: !Ref DBName
      Engine: oracle-se2
      EngineVersion: '19.0.0.0.ru-2024-04.rur-2024-04.r1'
      DBInstanceClass: !Ref DBInstanceClass
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterUserPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      StorageType: gp2
      StorageEncrypted: true
      BackupRetentionPeriod: 7
      MultiAZ: false
      AllocatedStorage: 20
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      LicenseModel: license-included
      Tags:
        - Key: Name
          Value: MyRDSInstance

  # Secrets Manager Secret for RDS Credentials
  RDSSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'Secret for RDS instance credentials'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\\'

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'SecretsManagerPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'secretsmanager:GetSecretValue'
                  - 'secretsmanager:PutSecretValue'
                  - 'secretsmanager:GetRandomPassword'
                Resource: '*'
              - Effect: 'Allow'
                Action:
                  - 'rds:ModifyDBInstance'
                Resource: !Sub 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:${DBInstanceIdentifier}'

  # Lambda Function to Rotate RDS Credentials
  RotateRDSCredentialsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os
          import json
          from botocore.exceptions import ClientError

          def handler(event, context):
              secret_name = os.environ['SECRET_NAME']
              db_instance_identifier = os.environ['DB_INSTANCE_IDENTIFIER']
              rds_client = boto3.client('rds')
              secrets_client = boto3.client('secretsmanager')

              try:
                  get_secret_value_response = secrets_client.get_secret_value(SecretId=secret_name)
                  secret = json.loads(get_secret_value_response['SecretString'])

                  # Generate a new password
                  new_password = secrets_client.get_random_password(PasswordLength=16, ExcludeCharacters='"@/\\')['RandomPassword']

                  # Update the RDS instance password
                  rds_client.modify_db_instance(
                      DBInstanceIdentifier=db_instance_identifier,
                      MasterUserPassword=new_password,
                      ApplyImmediately=True
                  )

                  # Update the secret with the new password
                  secret['password'] = new_password
                  secrets_client.put_secret_value(
                      SecretId=secret_name,
                      SecretString=json.dumps(secret)
                  )

                  return {
                      'statusCode': 200,
                      'body': 'Credentials rotated successfully'
                  }

              except ClientError as e:
                  print(f"Error: {e}")
                  raise e

      Runtime: python3.9
      Timeout: 300
      Environment:
        Variables:
          SECRET_NAME: !Ref RDSSecret
          DB_INSTANCE_IDENTIFIER: !Ref DBInstanceIdentifier

  # EventBridge Rule to Trigger Lambda Function every Week
  RotateRDSCredentialsRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: 'rate(1 week)'
      Targets:
        - Arn: !GetAtt RotateRDSCredentialsFunction.Arn
          Id: 'RotateRDSCredentialsFunction'

  # Permission for EventBridge to invoke Lambda Function
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt RotateRDSCredentialsFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt RotateRDSCredentialsRule.Arn

Outputs:
  RDSSecretArn:
    Description: ARN of the Secrets Manager secret storing RDS credentials
    Value: !Ref RDSSecret

  RDSInstanceEndpoint:
    Description: Endpoint of the created RDS instance
    Value: !GetAtt MyDBInstance.Endpoint.Address

  RDSInstancePort:
    Description: Port of the created RDS instance
    Value: !GetAtt MyDBInstance.Endpoint.Port
